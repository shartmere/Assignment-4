import java.io.*;
import java.net.*;

public class StrongPasswordChecker {
    public static boolean isStrongPassword(String password, ChainingHashTable chainingTable,
                                           LinearProbingHashTable probingTable, boolean useOldHash, int chainingSize, int probingSize) {
        if (password.length() < 8) return false;
        if (chainingTable.contains(password, useOldHash, chainingSize) || probingTable.contains(password, useOldHash, probingSize)) {
            return false;
        }
        for (int i = 0; i < 10; i++) {
            String strippedPassword = password.replaceAll("\\d$", "");
            if (chainingTable.contains(strippedPassword, useOldHash, chainingSize) || probingTable.contains(strippedPassword, useOldHash, probingSize)) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) throws IOException {
        final int CHAINING_SIZE = 1000;
        final int PROBING_SIZE = 20000;

        URL url = new URL("https://www.mit.edu/~ecprice/wordlist.10000");
        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));

        ChainingHashTable chainingTable = new ChainingHashTable(CHAINING_SIZE);
        LinearProbingHashTable probingTable = new LinearProbingHashTable(PROBING_SIZE);
        boolean useOldHash = true; // Toggle for old/new hashCode

        String word;
        while ((word = br.readLine()) != null) {
            chainingTable.insert(word.trim(), useOldHash, CHAINING_SIZE);
            probingTable.insert(word.trim(), useOldHash, PROBING_SIZE);
        }

        String[] passwords = { "account8", "accountability", "9a$D#qW7!uX&Lv3zT", "B@k45*W!c$Y7#zR9P", "X$8vQ!mW#3Dz&Yr4K5" };

        for (String password : passwords) {
            boolean strong = isStrongPassword(password, chainingTable, probingTable, useOldHash, CHAINING_SIZE, PROBING_SIZE);
            System.out.println("Password: " + password);
            System.out.println("Is strong: " + strong);
            System.out.println("Chaining comparisons: " + chainingTable.getComparisons());
            System.out.println("Probing comparisons: " + probingTable.getComparisons());
            System.out.println();
        }
    }
}
